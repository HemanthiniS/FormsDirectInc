buildscript {
    ext.kotlin_version = '1.2.50'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.3.RELEASE")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'war'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'


repositories {
    mavenLocal()
    mavenCentral()
    maven {
        credentials {
            username = mavenUser
            password = mavenPassword
        }
        url "https://repository.dcis.net/repository/all/"
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

processResources {
    def resourceBundleMap = [:]

    if (project.hasProperty("sites")) {
        from "src/main/resources"

        eachFile { detail ->
            println detail

            if (detail.name.matches("ResourceBundle.*.properties")) {

                //
                // Replace tokens in resource bundle with name-value
                // pairs from "site".properties
                //

                def tokenReplacementProperties = new Properties()

                File propertyFile = file("fd.properties")

                if (propertyFile.exists()) {
                    propertyFile.withInputStream {
                        tokenReplacementProperties.load(it);
                    }

                    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: tokenReplacementProperties)
                }

                //
                // Set output path for file
                //

                detail.path("com/formsdirectinc/registration/resources/" + detail.name)

                //
                // Store in map if the file doesn't exist
                //

                if (resourceBundleMap[detail.name] == null) {
                    resourceBundleMap[detail.name] = detail
                } else {
                    //
                    // File already exists in map. Merge.
                    //

                    Properties mapProperties = new Properties()
                    Properties currentFileProperties = new Properties()
                    Properties combined = new Properties()

                    detail.file.withInputStream {
                        currentFileProperties.load(it)
                    }

                    resourceBundleMap[detail.name].file.withInputStream {
                        mapProperties.load(it)
                    }

                    if (resourceBundleMap[detail.name].file.absolutePath.matches(".*/src/main/resources/.*")) {
                        //
                        // Resource Bundle in map is the default resource bundle. Replace.
                        //

                        println "Overwriting common resources in map with site-specific resources"
                        mapProperties.putAll(currentFileProperties)
                        combined = mapProperties
                    } else {
                        //
                        // Resource Bundle in map is the site-specific resource bundle.
                        //

                        println "Overwriting site-specific resources in map with common resources"
                        currentFileProperties.putAll(mapProperties)
                        combined = currentFileProperties
                    }

                    //
                    // Write merged resource bundle to file
                    //

                    File f = new File(buildDir.absolutePath + "/resources/main/com/formsdirectinc/registration/resources/")
                    f.mkdirs()
                    FileOutputStream os = new FileOutputStream(f.absolutePath + "/" + detail.name)
                    combined.store(os, "")
                    os.close()

                    //
                    // Exclude un-merged resource bundles from copy
                    //

                    detail.exclude()
                    resourceBundleMap[detail.name].exclude()
                }
            }
        }
    }
}
println("starting of the bootwar ")
bootWar {
    if (project.hasProperty('site')) {
        println "hola 0"
        def siteList = project.property('site').toString().split(',')
        println "hola 1"
        siteList.each { site ->
            println "Processing site: $site"
            println "src/main/webapps/" + site
            from "src/main/webapps/" + site
            if (project.hasProperty('mode')) {
                println "specified mode: " + mode
            }
            def appProps = new Properties()
            def propFile = new File("src/main/resources/assetsconf.properties")
            println "hola 2"
            if (propFile.canRead()) {
                appProps.load(new FileInputStream(propFile))
                println("inside canRead()")
                if (appProps != null && project.hasProperty('mode') && appProps.containsKey(site.toLowerCase() + "." + mode)) {
                    println "assetsPath: " + appProps[site.toLowerCase() + "." + mode]
                    println ("site" + site)
                    from "src/main/webapps/" + site
                    include '**/*.jsp'
                    include '**/*.html'
                    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: ['assetsStaticPath': appProps[site.toLowerCase() + "." + mode]])
                }
            }
            if(project.hasProperty('version')){
                println "specified Version: "+version
            }

            filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: ['assetsStaticVersion': version])
        }
        from 'src/main/webapps/' + site
        include 'WEB-INF/tags/fdTags/**'
        include 'scripts/**'
        archiveName 'registration.war'
    }
}

dependencies {
    // SPRING PACKAGES
    implementation 'org.springframework.boot:spring-boot-starter-web' //

    // JETBRAINS PACKAGES
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")//
    implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version")//

    // FORMSDIRECT PACKAGES
    implementation "com.formsdirectinc:tenant:2023.3.0-SNAPSHOT"//
    implementation ('com.formsdirectinc:model:3.0.16-RELEASE')//
    implementation ('com.formsdirectinc:xao:3.0.16-RELEASE')//
    implementation ('com.formsdirectinc:ui-i18n:3.0.16-RELEASE')//
    implementation "com.formsdirectinc:messageSource:2023.3.0-SNAPSHOT"//
    implementation "com.formsdirectinc:security-conf:2023.3.0-SNAPSHOT"//
    implementation "com.formsdirectinc:security:2.1-RELEASE"//
    implementation ('com.formsdirectinc:ui-annotations:3.0.16-RELEASE')//
    implementation "com.formsdirectinc:tenant:2023.3.0-SNAPSHOT"//
    implementation "com.formsdirectinc:event-logger:1.6-RELEASE"//
    implementation "com.formsdirectinc:ui-auth:3.0.16-RELEASE"//
    implementation ('com.formsdirectinc:filters:3.0.16-RELEASE')//
    implementation "com.formsdirectinc:hibernate-encrypted-string-type:2023.3.0-SNAPSHOT"//
    implementation ("com.formsdirectinc:dao:3.0.16.1-RELEASE") // REQUIRED TO SOLVE THIS ISSUE `Caused by: java.lang.ClassNotFoundException: Could not load requested class : org.jasypt.hibernate3.type.EncryptedStringType`

    // OTHER PACKAGES
    implementation 'com.auth0:mvc-auth-commons:1.0.8'//
    implementation "com.sun.mail:javax.mail:1.6.2"//
    implementation 'commons-lang:commons-lang:2.6'//
    implementation 'ch.qos.logback:logback-classic:1.1.6'//
    implementation 'ch.qos.logback:logback-core:1.1.6'//
    implementation 'org.slf4j:slf4j-api:1.7.7'//
    implementation 'org.slf4j:log4j-over-slf4j:1.7.10'//
    implementation 'org.json:json:20160810'//
    implementation 'com.jamonapi:jamon:2.80'//
    implementation 'org.hibernate:hibernate-core:5.0.9.Final'//
    implementation 'com.mashape.unirest:unirest-java:1.4.9'//
    implementation 'com.google.code.gson:gson:2.8.8'//
    implementation group: 'com.zaxxer', name: 'HikariCP', version: '3.4.3'//
    implementation 'mysql:mysql-connector-java:8.0.26'//
    implementation 'commons-lang:commons-lang:2.6'//
    implementation 'com.getsentry.raven:raven-logback:7.8.5'//
    implementation 'org.jasypt:jasypt:1.9.2'//
    implementation 'org.jasypt:jasypt-hibernate4:1.9.2'//
    implementation 'org.hibernate:hibernate-core:5.0.9.Final'//
    implementation 'net.rossillo.mvc.cache:spring-mvc-cache-control:1.1.1-RELEASE'//
    implementation group: 'com.github.ulisesbocchio', name: 'jasypt-spring-boot-starter', version: '2.1.0'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}